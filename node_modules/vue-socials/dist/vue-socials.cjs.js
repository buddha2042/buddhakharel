'use strict';var Vue=require('vue');function _interopDefaultLegacy(e){return e&&typeof e==='object'&&'default'in e?e:{'default':e}}var Vue__default=/*#__PURE__*/_interopDefaultLegacy(Vue);/**
 * A simple function to format object to window.open() string features.
 * It formats all values to a number.
 * @example { width: 500, menubar: true, toolbar: false } => 'width=500,menubar=1,toolbar=0'
 * @link https://developer.mozilla.org/en-US/docs/Web/API/Window/open#Window_features
 */
function getFormattedWindowFeatures(object) {
  var keys = Object.keys(object);
  return keys.map(function (key) {
    return "".concat(key, "=").concat(Number(object[key]));
  }).join(',');
}/**
 * A simple function to get window client rect.
 * It works with minimized windows, user zoom, and dual-screen.
 * @link http://www.xtf.dk/2011/08/center-new-popup-window-even-on.html
 */
function getPopupClientRect(width, height) {
  var systemZoom = window.innerWidth / window.screen.availWidth;
  var finalWidth = width / systemZoom;
  var finalHeight = height / systemZoom;
  var left = (window.innerWidth - width) / 2 / systemZoom + window.screenLeft;
  var top = (window.innerHeight - height) / 2 / systemZoom + window.screenTop;
  return {
    width: finalWidth,
    height: finalHeight,
    top: top,
    left: left
  };
}/**
 * Convenience inspection utilities
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types,@typescript-eslint/no-explicit-any
function isArray(value) {
  return Array.isArray(value);
} // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types,@typescript-eslint/no-explicit-any

function isUndefined(value) {
  return value === undefined;
}/**
 * Hey!
 *
 * Base socials mixin used for every social component
 * which have share window. It provides a method for window.open()
 * and has props for window features. Also has a method for component render.
 */
var DEFAULT_WINDOW_FEATURES = {
  width: 600,
  height: 540
};
/**
 * Wrapper around Vue mixin to pass parameters inside.
 * We use multiple parameters instead of a single object because
 * it causes problems with tree-shaking. I don't know why.
 * A little bit inconvenient, but overall OK :)
 */

function BaseSocials(name, customWindowFeatures, customShareOptions, customAriaLabel, isShareOptionsRequired, isWindowFeaturesRequired) {
  return /* #__PURE__ */Vue__default['default'].extend({
    props: {
      /**
       * Requested features of the new window
       * @link https://developer.mozilla.org/en-US/docs/Web/API/Window/open#Window_features
       */
      windowFeatures: {
        type: Object,
        default: function _default() {
          return customWindowFeatures || DEFAULT_WINDOW_FEATURES;
        },
        required: isWindowFeaturesRequired
      },

      /**
       * Share parameters for social network
       */
      shareOptions: {
        type: Object,
        default: function _default() {
          return customShareOptions || {};
        },
        required: isShareOptionsRequired || true
      },

      /**
       * Use native link behavior instead of window.open()
       */
      useNativeBehavior: {
        type: Boolean,
        default: false
      }
    },
    data: function data() {
      return {
        shareDialog: null,
        shareDialogCloseIntervalId: undefined
      };
    },

    /**
     * Make sure interval has been cleared
     */
    beforeDestroy: function beforeDestroy() {
      window.clearInterval(this.shareDialogCloseIntervalId);
    },
    computed: {
      /**
       * Merge default and user window features
       */
      mergedWindowFeatures: function mergedWindowFeatures() {
        var windowFeatures = this.windowFeatures;
        /**
         * We use `Object.assign` instead of the spread operator
         * to prevent adding the polyfill (about 150 bytes gzipped)
         */

        return Object.assign({}, DEFAULT_WINDOW_FEATURES, windowFeatures);
      },

      /**
       * Calculate the aria-label for a link.
       * It replaces @s in a string with a social network name.
       */
      ariaLabel: function ariaLabel() {
        var $attrs = this.$attrs;
        var target = $attrs.target;
        var label = customAriaLabel || 'Share this with @s.';

        if (target === '_blank' || isUndefined(target)) {
          label += ' (opens in new window)';
        }

        return label.replace(/@s/g, name);
      }
    },
    methods: {
      /**
       * Create new share popup from url
       * @link https://developer.mozilla.org/en-US/docs/Web/API/Window/open#Syntax
       */
      openShareDialog: function openShareDialog(url) {
        var _this$shareDialog,
            _this = this;

        var mergedWindowFeatures = this.mergedWindowFeatures;
        var width = mergedWindowFeatures.width,
            height = mergedWindowFeatures.height;
        var shareDialogClientRect = getPopupClientRect(width, height);
        var formattedFeatures = getFormattedWindowFeatures(Object.assign({}, mergedWindowFeatures, shareDialogClientRect));
        /**
         * If the pointer to the window object in memory does not exist
         * or if such pointer exists but the window was closed
         */

        if (this.shareDialog === null || (_this$shareDialog = this.shareDialog) !== null && _this$shareDialog !== void 0 && _this$shareDialog.closed) {
          /**
           * then create it. The new window will be created and
           * will be brought on top of any other window.
           */
          this.shareDialog = window.open(url, '_blank', formattedFeatures);
          /**
           * If window.open has been blocked â€“ emit 'block' event and then do nothing
           * If not â€“ emit 'open' event
           */

          if (!this.shareDialog) {
            this.$emit('popup-block');
            return;
          }

          this.$emit('popup-open');
          /**
           * window.onbeforeunload event didn't work because of Same Origin Policy
           * So we check if it has been closed every 300 ms
           * @link https://atashbahar.com/post/2010-04-27-detect-when-a-javascript-popup-window-gets-closed
           */

          this.shareDialogCloseIntervalId = window.setInterval(function () {
            var _this$shareDialog2;

            if (_this.shareDialog === null || (_this$shareDialog2 = _this.shareDialog) !== null && _this$shareDialog2 !== void 0 && _this$shareDialog2.closed) {
              window.clearInterval(_this.shareDialogCloseIntervalId);

              _this.$emit('popup-close');
              /**
               * Unset reference to the popup window
               * @link https://web.dev/detached-window-memory-leaks/#solution-unset-references
               */


              _this.shareDialog = null;
            }
          }, 300);
        } else {
          /**
           * else the window reference must exist and the window
           * is not closed; therefore, we can bring it back on top of any other
           * window with the focus() method. There would be no need to re-create
           * the window or to reload the referenced resource.
           */
          this.shareDialog.focus();
          this.$emit('popup-focus');
        }
      },

      /**
       * Create new share component
       */
      generateComponent: function generateComponent(h, url) {
        var _this2 = this;

        return h('a', {
          attrs: {
            href: url,
            target: '_blank',
            rel: 'nofollow noopener noreferrer',
            'aria-label': this.ariaLabel
          },
          on: Object.assign({}, this.$listeners, {
            click: function click(event) {
              if (!_this2.useNativeBehavior) {
                event.preventDefault();

                _this2.openShareDialog(url);
              }

              _this2.$emit('click');
            }
          })
        }, this.$slots.default);
      }
    }
  });
}/**
 * A simple function to format object to GET parameters.
 * It skips undefined, null, and NaN values.
 * @example { foo: 'bar', bar: undefined, foobar: 'foo bar', } => '?foo=bar&foobar=foo%20bar'
 * @example { foo: null, bar: undefined, foobar: NaN, } => ''
 */
function getSerialisedParams(object) {
  var params = Object.entries(object).filter(function (param) {
    return param[1] !== undefined && param[1] !== null && !Number.isNaN(param[1]) && param[1] !== '';
  }).map(function (param) {
    return "".concat(encodeURIComponent(param[0]), "=").concat(encodeURIComponent(String(param[1])));
  });
  return params.length > 0 ? "?".concat(params.join('&')) : '';
}/**
 * Hey!
 *
 * SBlogger component used for Blogger social network
 * @link https://www.blogger.com/
 * @example https://www.blogger.com/blog-this.g?u=https%3A%2F%2Fgithub.com%2F&t=Text&n=Title/
 */
/**
 * Share parameters for link
 * @link https://stackoverflow.com/a/22583473/13374604
 * url => u
 * title => n
 * text => t
 */

var SBlogger = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SBlogger',
  mixins: [BaseSocials('Blogger', undefined, undefined, undefined, true)],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://www.blogger.com/blog-this.g';
      var shareOptions = this.shareOptions;
      var url = shareOptions.url,
          title = shareOptions.title,
          text = shareOptions.text;
      var serialisedParams = getSerialisedParams({
        u: url,
        t: text,
        n: title
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * A simple function to format array to a comma-separated list.
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types,@typescript-eslint/no-explicit-any

function getSeparatedList(array) {
  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';

  if (isArray(array)) {
    return array.join(separator);
  }

  return '';
}/**
 * Hey!
 *
 * SDevTo component used for DevTo social network
 * @link https://dev.to/
 * @example https://dev.to/new?prefill=%0A%20%20%20%20%20%20%20%20---%0A%20%20%20%20%20%20%20%20title%3ATitle%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20tags%3Atag%0A%20%20%20%20%20%20%20%20---%0A%20%20%20%20%20%20%20%20Text%201%0AText%202%0A%7B%25%20wikipedia%20https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FWikipedia%20%25%7D
 */
/**
 * Share parameters for link
 * @link https://dev.to/devteam/announcing-off-platform-share-to-dev-functionality-57j9
 */

var SDevTo = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SDevTo',
  mixins: [BaseSocials('DevTo')],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://dev.to/new';
      var shareOptions = this.shareOptions;
      var title = shareOptions.title,
          isPublished = shareOptions.isPublished,
          tags = shareOptions.tags,
          content = shareOptions.content;
      var formattedTitle = title ? "title:".concat(title) : '';
      var formattedPublish = isPublished ? "published:".concat(isPublished) : '';
      var formattedTags = tags ? "tags:".concat(getSeparatedList(tags, ', ')) : '';
      var formattedContent = content || '';
      var serialisedParams = getSerialisedParams({
        prefill: "\n        ---\n        ".concat(formattedTitle, "\n        ").concat(formattedPublish, "\n        ").concat(formattedTags, "\n        ---\n        ").concat(formattedContent)
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SDiaspora component used for DiasporaFoundation social network
 * @link https://diasporafoundation.org/
 * @example https://share.diasporafoundation.org/?url=https%3A%2F%2Fgithub.com%2F&title=Title/
 */
/**
 * Share parameters for link
 * @link https://share.diasporafoundation.org/about.html
 * @link https://wiki.diasporafoundation.org/FAQ_for_web_developers
 */

var SDiaspora = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SDiaspora',
  mixins: [BaseSocials('Diaspora', {
    width: 600,
    height: 540
  })],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://share.diasporafoundation.org';
      var shareOptions = this.shareOptions;
      var url = shareOptions.url,
          title = shareOptions.title;
      var serialisedParams = getSerialisedParams({
        url: url,
        title: title
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SDouban component used for Douban social network
 * @link https://www.douban.com
 * @example https://accounts.douban.com/passport/login?redir=https%3A//www.douban.com/share/service%3Fname%3D%26href%3D%26image%3D%26updated%3D%26bm%3D%26name%3DTitle%26text%3DText%26comment%3Dhttps%253A%252F%252Fgithub.com%252F%26href%3Dhttps%253A%252F%252Fgithub.com%252F
 */
/**
 * Share parameters for link
 * @link https://blog.duncanworthy.me/misc/how-to-add-chinese-social-media-sharing-links-on-wordpress/comment-page-1/
 */

var SDouban = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SDouban',
  mixins: [BaseSocials('Douban', {
    width: 1100,
    height: 450
  })],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'http://www.douban.com/recommend/';
      var shareOptions = this.shareOptions;
      var title = shareOptions.title,
          url = shareOptions.url;
      var serialisedParams = getSerialisedParams({
        url: url,
        title: title
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SEmail component used for sending Email via an HTML link
 * @example mailto:google@gmail.com?subject=Subject&body=Hello%0AWorld&cc=google1%40gmail.com&bcc=google2%40gmail.com
 */
/**
 * Share parameters for link
 * @link https://tools.ietf.org/html/rfc2368
 * @link https://css-tricks.com/snippets/html/mailto-links/
 * @description cc â€“ carbon copy
 * @description bcc â€“ blind carbon copy
 */

var SEmail = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SEmail',
  props: {
    /**
     * Share parameters for Email
     */
    shareOptions: {
      type: Object,
      required: true
    }
  },
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'mailto:';
      var shareOptions = this.shareOptions;
      var mail = shareOptions.mail,
          subject = shareOptions.subject,
          body = shareOptions.body,
          cc = shareOptions.cc,
          bcc = shareOptions.bcc;
      var serialisedParams = getSerialisedParams({
        subject: subject,
        body: body,
        cc: getSeparatedList(cc, ', '),
        bcc: getSeparatedList(bcc, ', ')
      });
      return "".concat(BASE_URL).concat(mail).concat(serialisedParams);
    },
    ariaLabel: function ariaLabel() {
      var shareOptions = this.shareOptions;
      var mail = shareOptions.mail,
          cc = shareOptions.cc,
          bcc = shareOptions.bcc;
      var LABELS = ["Send an e-mail to ".concat(mail)];

      if (cc) {
        LABELS.push("add a carbon copy for ".concat(getSeparatedList(cc, ', ')));
      }

      if (bcc) {
        LABELS.push("add a blind carbon copy for ".concat(getSeparatedList(bcc, ', ')));
      }

      return "".concat(LABELS.join(' and '), ".");
    }
  },
  render: function render(h) {
    return h('a', {
      attrs: {
        href: this.networkURL,
        rel: 'noopener noreferrer',
        'aria-label': this.ariaLabel
      },
      on: this.$listeners
    }, this.$slots.default);
  }
});/**
 * Hey!
 *
 * SEvernote component used for Evernote social network
 * @link https://www.evernote.com/
 * @example https://www.evernote.com/clip.action?url=https%3A%2F%2Fgithub.com%2F&title=Title
 */
/**
 * Share parameters for link
 */

var SEvernote = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SEvernote',
  mixins: [BaseSocials('Evernote', {
    width: 800,
    height: 560
  })],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://www.evernote.com/clip.action';
      var shareOptions = this.shareOptions;
      var url = shareOptions.url,
          title = shareOptions.title;
      var serialisedParams = getSerialisedParams({
        url: url,
        title: title
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SFacebook component used for Facebook social network.
 * @link https://www.facebook.com/
 * @example https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fgithub.com%2F&quote=Quote&hashtag=%23Github
 */
/**
 * Share parameters for link
 * @link https://developers.facebook.com/docs/workplace/sharing/share-dialog/
 */

var SFacebook = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SFacebook',
  mixins: [BaseSocials('Facebook', {
    width: 685,
    height: 600
  })],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://www.facebook.com/sharer/sharer.php';
      var shareOptions = this.shareOptions;
      var url = shareOptions.url,
          quote = shareOptions.quote,
          hashtag = shareOptions.hashtag;
      return "".concat(BASE_URL).concat(getSerialisedParams({
        u: url,
        quote: quote,
        hashtag: hashtag
      }));
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Simple implementation of JSONP.
 * It creates window.callbackRegistry to minimize global window pollution.
 * It uses callback to prevent adding the promise polyfill.
 */
function JSONP(url, callback, callbackName) {
  var script = document.createElement('script');
  var cbName = callbackName || 'callback';

  if (callback) {
    if (!window.callbackRegistry) {
      window.callbackRegistry = {};
    }

    var _key = "cb".concat(String(Math.random()).slice(-6));

    script.src = "".concat(url).concat(url.indexOf('?') === -1 ? '?' : '&').concat(cbName, "=callbackRegistry.").concat(_key);

    script.onerror = function JSONPOnError() {
      delete window.callbackRegistry[_key];
      callback(new Error(), null);
    };

    window.callbackRegistry[_key] = function JSONPCallback(response) {
      delete window.callbackRegistry[_key];
      callback(null, response);
    };
  } else {
    script.src = url;
  }

  document.head.removeChild(document.head.appendChild(script));
}/**
 * Hey!
 *
 * Base count mixin used for every social count component.
 */

/**
 * Wrapper around Vue mixin to pass parameters inside.
 * We use multiple parameters instead of a single object because
 * it causes problems with tree-shaking. I don't know why.
 * A little bit inconvenient, but overall OK :)
 */
function BaseCount(name, customShareOptions, isShareOptionsRequired, customAriaLabel) {
  return /* #__PURE__ */Vue__default['default'].extend({
    props: {
      /**
       * Component tag
       */
      tag: {
        type: [String, Object],
        default: 'span'
      },

      /**
       * Share parameters for social network
       */
      shareOptions: {
        type: Object,
        default: function _default() {
          return customShareOptions || {};
        },
        required: isShareOptionsRequired || true
      }
    },
    data: function data() {
      return {
        count: undefined,
        response: null,
        error: null,
        isLoading: false
      };
    },
    computed: {
      /**
       * Calculate the aria-label for a counter.
       * It replaces @s in a string with a social network name
       * and @c with a count.
       */
      ariaLabel: function ariaLabel() {
        var count = this.count;
        var label = customAriaLabel || '@c people share this on @s.';

        if (!isUndefined(count)) {
          return label.replace(/@c/g, String(count)).replace(/@s/g, name);
        }

        return 'No one shares this content yet.';
      }
    },
    methods: {
      /**
       * Save response from JSONP or HTTP and emit event
       */
      handleResult: function handleResult(value) {
        this.response = value;
        this.$emit('load', value);
      },

      /**
       * Save response from JSONP or HTTP and emit event
       */
      handleError: function handleError(value) {
        this.error = value;
        this.$emit('error', value);
      },

      /**
       * Save loading state and emit event
       */
      handleLoading: function handleLoading(value) {
        this.isLoading = value;
        this.$emit('loading', value);
      },

      /**
       * Save counter value and render inside element
       */
      handleCount: function handleCount(count) {
        this.count = count;
      },

      /**
       * Create new count component
       */
      generateComponent: function generateComponent(h) {
        var children = this.$scopedSlots.default || function (props) {
          return [props.count];
        };

        return h(this.tag, {
          attrs: {
            'aria-label': this.ariaLabel
          },
          on: this.$listeners
        }, children({
          isLoading: this.isLoading,
          response: this.response,
          count: this.count
        }));
      }
    },
    render: function render(h) {
      return this.generateComponent(h);
    }
  });
}/**
 * Hey!
 *
 * SFacebookCount component used for Facebook social network
 * @link https://www.facebook.com/
 * @example https://graph.facebook.com/?url=https://github.com/
 */
var SFacebookCount = /* #__PURE__ */Vue__default['default'].extend({
  mixins: [BaseCount('Facebook')],
  methods: {
    handleFacebookResponse: function handleFacebookResponse(data) {
      this.handleResult(data);

      if ('engagement' in data) {
        var _data$engagement;

        this.handleCount((_data$engagement = data.engagement) === null || _data$engagement === void 0 ? void 0 : _data$engagement.share_count);
      }
    }
  },
  mounted: function mounted() {
    var _this = this;

    var BASE_URL = 'https://graph.facebook.com/';
    var shareOptions = this.shareOptions;
    var id = shareOptions.id,
        accessToken = shareOptions.accessToken,
        fields = shareOptions.fields,
        scopes = shareOptions.scopes;
    var finalURL = "".concat(BASE_URL).concat(getSerialisedParams({
      id: id,
      access_token: accessToken,
      fields: getSeparatedList(fields),
      scopes: getSeparatedList(scopes)
    }));
    this.handleLoading(true);
    JSONP(finalURL, function (err, data) {
      _this.handleLoading(false);

      if (data) {
        _this.handleFacebookResponse(data);
      }

      if (err) {
        _this.handleError(err);
      }
    });
  }
});/**
 * Hey!
 *
 * SFacebookMessenger component used for FacebookMessenger social network
 * @link https://facebook.com/
 * @example https://www.facebook.com/dialog/send?link=https%3A%2F%2Fgithub.com%2F&app_id=123456789&redirect_uri=https%3A%2F%2Fwww.domain.com%2F
 */
/**
 * Share parameters for link
 * @link https://developers.facebook.com/docs/sharing/reference/send-dialog#examples
 * url => link
 * appId => app_id
 * redirectUri => redirect_uri
 */

var SFacebookMessenger = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SFacebookMessenger',
  mixins: [BaseSocials('Facebook Messenger')],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'http://www.facebook.com/dialog/send';
      var shareOptions = this.shareOptions;
      var url = shareOptions.url,
          appId = shareOptions.appId,
          redirectUri = shareOptions.redirectUri,
          to = shareOptions.to;
      var serialisedParams = getSerialisedParams({
        link: url,
        app_id: appId,
        redirect_uri: redirectUri,
        to: to
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SFacebookWorkplace component used for FacebookWorkplace social network
 * @link https://work.facebook.com/
 * @example https://work.facebook.com/sharer.php?url=https%253A%252F%252Fgithub.com
 */
/**
 * Share parameters for link
 * @link https://developers.facebook.com/docs/workplace/sharing/share-dialog/
 */

var SFacebookWorkplace = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SFacebookWorkplace',
  mixins: [BaseSocials('Facebook Workplace')],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://work.facebook.com/sharer.php';
      var shareOptions = this.shareOptions;
      var url = shareOptions.url;
      var serialisedParams = getSerialisedParams({
        url: url
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SFlipBoard component used for FlipBoard social network
 * @link https://flipboard.com/
 * @example https://share.flipboard.com/bookmarklet/popout?url=https%3A%2F%2Fgithub.com%2F&title=Title
 */
/**
 * Share parameters for link
 * @link https://about.flipboard.com/social-plugins/?tool=browser
 */

var SFlipBoard = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SFlipBoard',
  mixins: [BaseSocials('Flipboard', {
    width: 834,
    height: 572
  })],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://share.flipboard.com/bookmarklet/popout';
      var shareOptions = this.shareOptions;
      var url = shareOptions.url,
          title = shareOptions.title;
      var serialisedParams = getSerialisedParams({
        v: '2',
        url: url,
        title: title
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SGithub component used for GitHub social network
 * @link https://github.com/
 * @example https://github.com/webistomin/
 */
var GITHUB_LINK_TYPES$5 = {
  sponsor: 'sponsor',
  follow: 'follow',
  profile: 'profile'
};
var SGithub = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SGithub',
  mixins: [BaseSocials('GitHub', {
    width: 900,
    height: 600
  })],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://github.com/';
      var shareOptions = this.shareOptions;
      var username = shareOptions.username,
          type = shareOptions.type;

      switch (type) {
        case GITHUB_LINK_TYPES$5.sponsor:
          return "".concat(BASE_URL, "sponsors/").concat(username);

        case GITHUB_LINK_TYPES$5.follow:
          return "".concat(BASE_URL).concat(username, "?tab=followers");

        case GITHUB_LINK_TYPES$5.profile:
        default:
          return "".concat(BASE_URL).concat(username);
      }
    },
    ariaLabel: function ariaLabel() {
      var shareOptions = this.shareOptions;
      var username = shareOptions.username,
          type = shareOptions.type;

      switch (type) {
        case GITHUB_LINK_TYPES$5.sponsor:
          return "Sponsor ".concat(username, " on GitHub.");

        case GITHUB_LINK_TYPES$5.follow:
          return "Follow ".concat(username, " on GitHub.");

        case GITHUB_LINK_TYPES$5.profile:
        default:
          return "Watch ".concat(username, " on GitHub.");
      }
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SGithubCount component used for GitHub social network
 * @link https://github.com/
 */
var GITHUB_LINK_TYPES$4 = {
  follow: 'follow'
};
var SGithubCount = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SGithubCount',
  mixins: [BaseCount('GitHub', {}, true, '@c followers on @s.')],
  methods: {
    handleGithubResponse: function handleGithubResponse(data) {
      this.handleResult(data);

      if ('followers' in data.data) {
        this.handleCount(data.data.followers);
      }
    }
  },
  mounted: function mounted() {
    var _this = this;

    var shareOptions = this.shareOptions;
    var username = shareOptions.username,
        type = shareOptions.type;
    var BASE_URL = 'https://api.github.com/';
    var finalURL;

    switch (type) {
      case GITHUB_LINK_TYPES$4.follow:
      default:
        finalURL = "".concat(BASE_URL, "users/").concat(username);
    }

    this.handleLoading(true);
    JSONP(finalURL, function (err, data) {
      _this.handleLoading(false);

      if (data) {
        _this.handleGithubResponse(data);
      }

      if (err) {
        _this.handleError(err);
      }
    });
  }
});/**
 * Hey!
 *
 * SGithubGist component used for Github Gists social network
 * @link https://gist.github.com/
 * @example https://gist.github.com/ai/e3683b03ba936ade91d33dbc721cd6d8/stargazers
 */
var GITHUB_LINK_TYPES$3 = {
  gist: 'gist',
  star: 'star',
  fork: 'fork',
  download: 'download'
};
var SGithubGist = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SGithubGist',
  mixins: [BaseSocials('GitHub Gists', {
    width: 900,
    height: 600
  })],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://gist.github.com/';
      var shareOptions = this.shareOptions;
      var username = shareOptions.username,
          gistId = shareOptions.gistId,
          type = shareOptions.type;

      switch (type) {
        case GITHUB_LINK_TYPES$3.fork:
          return "".concat(BASE_URL).concat(username, "/").concat(gistId, "/forks");

        case GITHUB_LINK_TYPES$3.star:
          return "".concat(BASE_URL).concat(username, "/").concat(gistId, "/stargazers");

        case GITHUB_LINK_TYPES$3.download:
          return "".concat(BASE_URL).concat(username, "/").concat(gistId, "/archive/master.zip");

        case GITHUB_LINK_TYPES$3.gist:
        default:
          return "".concat(BASE_URL).concat(username, "/").concat(gistId);
      }
    },
    ariaLabel: function ariaLabel() {
      var shareOptions = this.shareOptions;
      var type = shareOptions.type;

      switch (type) {
        case GITHUB_LINK_TYPES$3.fork:
          return 'Fork this gist.';

        case GITHUB_LINK_TYPES$3.star:
          return 'Star this gist.';

        case GITHUB_LINK_TYPES$3.download:
          return 'Download this gist.';

        case GITHUB_LINK_TYPES$3.gist:
        default:
          return 'Watch this gist.';
      }
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SGithubGistCount component used for Github Gists social network
 * @link https://gist.github.com/
 */
var GITHUB_LINK_TYPES$2 = {
  fork: 'fork'
};
var SGithubGistCount = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SGithubGistCount',
  methods: {
    handleGithubResponse: function handleGithubResponse(data) {
      var shareOptions = this.shareOptions;
      var type = shareOptions.type;
      this.handleResult(data);
      var count;

      switch (type) {
        default:
        case GITHUB_LINK_TYPES$2.fork:
          if ('forks' in data.data) {
            count = data.data.forks.length;
          }

          break;
      }

      this.handleCount(count);
    }
  },
  mixins: [BaseCount('GithubGist')],
  mounted: function mounted() {
    var _this = this;

    var shareOptions = this.shareOptions;
    var gistId = shareOptions.gistId;
    var BASE_URL = 'https://api.github.com/';
    var finalURL = "".concat(BASE_URL, "gists/").concat(gistId);
    this.handleLoading(true);
    JSONP(finalURL, function (err, data) {
      _this.handleLoading(false);

      if (err) {
        _this.handleError(err);
      }

      if (data) {
        _this.handleGithubResponse(data);
      }
    });
  }
});/**
 * Hey!
 *
 * SGithubRepo component used for GitHub social network
 * @link https://github.com/
 */
var GITHUB_LINK_TYPES$1 = {
  repo: 'repo',
  watch: 'watch',
  star: 'star',
  fork: 'fork',
  download: 'download',
  issue: 'issue',
  pr: 'pr',
  template: 'template'
};
var SGithubRepo = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SGithubRepo',
  mixins: [BaseSocials('GitHub', {
    width: 900,
    height: 600
  })],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://github.com/';
      var shareOptions = this.shareOptions;
      var username = shareOptions.username,
          repository = shareOptions.repository,
          type = shareOptions.type;

      switch (type) {
        case GITHUB_LINK_TYPES$1.watch:
          return "".concat(BASE_URL).concat(username, "/").concat(repository, "/subscription");

        case GITHUB_LINK_TYPES$1.fork:
          return "".concat(BASE_URL).concat(username, "/").concat(repository, "/fork");

        case GITHUB_LINK_TYPES$1.star:
          return "".concat(BASE_URL).concat(username, "/").concat(repository, "/stargazers");

        case GITHUB_LINK_TYPES$1.issue:
          return "".concat(BASE_URL).concat(username, "/").concat(repository, "/issues/new");

        case GITHUB_LINK_TYPES$1.pr:
          return "".concat(BASE_URL).concat(username, "/").concat(repository, "/compare");

        case GITHUB_LINK_TYPES$1.download:
          return "".concat(BASE_URL).concat(username, "/").concat(repository, "/archive/master.zip");

        case GITHUB_LINK_TYPES$1.template:
          return "".concat(BASE_URL).concat(username, "/").concat(repository, "/generate");

        case GITHUB_LINK_TYPES$1.repo:
        default:
          return "".concat(BASE_URL).concat(username, "/").concat(repository);
      }
    },
    ariaLabel: function ariaLabel() {
      var shareOptions = this.shareOptions;
      var username = shareOptions.username,
          repository = shareOptions.repository,
          type = shareOptions.type;

      switch (type) {
        case GITHUB_LINK_TYPES$1.watch:
          return "Watch ".concat(username, "/").concat(repository, " on GitHub");

        case GITHUB_LINK_TYPES$1.fork:
          return "Fork ".concat(username, "/").concat(repository, " on GitHub");

        case GITHUB_LINK_TYPES$1.star:
          return "Give a star to ".concat(username, "/").concat(repository, " on GitHub");

        case GITHUB_LINK_TYPES$1.issue:
          return "Raise a new issue on ".concat(username, "/").concat(repository, " on GitHub");

        case GITHUB_LINK_TYPES$1.pr:
          return "Raise a new pull request ".concat(username, "/").concat(repository, " on GitHub");

        case GITHUB_LINK_TYPES$1.download:
          return "Download ".concat(username, "/").concat(repository, " from GitHub");

        case GITHUB_LINK_TYPES$1.template:
          return "Generate a new repository from ".concat(username, "/").concat(repository, " on GitHub");

        case GITHUB_LINK_TYPES$1.repo:
        default:
          return "Watch ".concat(username, "/").concat(repository, " on GitHub");
      }
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SGithubRepoCount component used for Github social network
 * @link https://github.com/
 */
var GITHUB_LINK_TYPES = {
  watch: 'watch',
  star: 'star',
  fork: 'fork',
  issues: 'issues'
};
var SGithubRepoCount = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SGithubRepoCount',
  mixins: [BaseCount('GitHub')],
  methods: {
    handleGithubResponse: function handleGithubResponse(data) {
      var shareOptions = this.shareOptions;
      var type = shareOptions.type;
      this.handleResult(data);
      var count;

      switch (type) {
        case GITHUB_LINK_TYPES.watch:
          if ('subscribers_count' in data.data) {
            count = data.data.subscribers_count;
          }

          break;

        case GITHUB_LINK_TYPES.fork:
          if ('forks_count' in data.data) {
            count = data.data.forks_count;
          }

          break;

        case GITHUB_LINK_TYPES.issues:
          if ('open_issues_count' in data.data) {
            count = data.data.open_issues_count;
          }

          break;

        case GITHUB_LINK_TYPES.star:
        default:
          if ('stargazers_count' in data.data) {
            count = data.data.stargazers_count;
          }

          break;
      }

      this.handleCount(count);
    }
  },
  mounted: function mounted() {
    var _this = this;

    var shareOptions = this.shareOptions;
    var username = shareOptions.username,
        repository = shareOptions.repository;
    var BASE_URL = 'https://api.github.com/';
    var finalURL = "".concat(BASE_URL, "repos/").concat(username, "/").concat(repository);
    this.handleLoading(true);
    JSONP(finalURL, function (err, data) {
      _this.handleLoading(false);

      if (err) {
        _this.handleError(err);
      }

      if (data) {
        _this.handleGithubResponse(data);
      }
    });
  }
});/**
 * Hey!
 *
 * SGmail component used for sending Email via GMail
 * @link https://mail.google.com/
 * @example https://mail.google.com/mail/u/0/?view=cm&to=google@gmail.com&su=Title&subject=Subject&body=Hello%0AWorld&cc=google1@gmail.com&bcc=google2@gmail.com&fs=1&tf=1
 */
/**
 * Share parameters for link
 */

var SGmail = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SGmail',
  mixins: [BaseSocials('Gmail')],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://mail.google.com/mail/';
      var shareOptions = this.shareOptions;
      var to = shareOptions.to,
          su = shareOptions.su,
          body = shareOptions.body,
          cc = shareOptions.cc,
          bcc = shareOptions.bcc;
      var serialisedParams = getSerialisedParams({
        view: 'cm',
        to: to,
        su: su,
        body: body,
        cc: cc,
        bcc: bcc
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SGoogleBookmarks component used for Google social network
 * @link https://www.google.com/bookmarks/
 * @example https://www.google.com/bookmarks/mark?op=edit&output=popup&bkmk=https%3A%2F%2Fgithub.com%2F&title=Title&annotation=Annotation&labels=tag
 */
/**
 * Share parameters for link
 */

var SGoogleBookmarks = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SGoogleBookmarks',
  mixins: [BaseSocials('Google Bookmarks')],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://www.google.com/bookmarks/mark';
      var shareOptions = this.shareOptions;
      var url = shareOptions.url,
          title = shareOptions.title,
          annotation = shareOptions.annotation,
          tags = shareOptions.tags;
      var serialisedParams = getSerialisedParams({
        op: 'edit',
        output: 'popup',
        bkmk: url,
        title: title,
        annotation: annotation,
        labels: getSeparatedList(tags)
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SHackerNews component used for HackerNews social network
 * @link https://news.ycombinator.com/
 * @example https://news.ycombinator.com/submitlink?u=https%3A%2F%2Fgithub.com%2F&t=Title
 */
/**
 * Share parameters for link
 */

var SHackerNews = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SHackerNews',
  mixins: [BaseSocials('HackerNews')],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://news.ycombinator.com/submitlink';
      var shareOptions = this.shareOptions;
      var url = shareOptions.url,
          title = shareOptions.title;
      var serialisedParams = getSerialisedParams({
        u: url,
        t: title
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SHatena component used for Hatena social network
 * @link https://b.hatena.ne.jp/
 */
/**
 * Share parameters for link
 */

var SHatena = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SHatena',
  mixins: [BaseSocials('Hatena')],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'http://b.hatena.ne.jp/add';
      var shareOptions = this.shareOptions;
      var url = shareOptions.url,
          title = shareOptions.title;
      var serialisedParams = getSerialisedParams({
        mode: 'confirm',
        url: url,
        title: title
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SHatenaCount component used for Hatena social network
 * @link https://b.hatena.ne.jp/
 */
/**
 * Share parameters for link
 */

var SHatenaCount = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SHatenaCount',
  mixins: [BaseCount('Hatena')],
  methods: {
    handleOKResponse: function handleOKResponse(count) {
      this.handleResult({
        count: count
      });
      this.handleCount(count);
    }
  },
  mounted: function mounted() {
    var _this = this;

    var shareOptions = this.shareOptions;
    var url = shareOptions.url;
    var BASE_URL = 'https://bookmark.hatenaapis.com/count/entry';
    var finalURL = "".concat(BASE_URL).concat(getSerialisedParams({
      url: url
    }));
    this.handleLoading(true);
    JSONP(finalURL, function (err, data) {
      _this.handleLoading(false);

      if (err) {
        _this.handleError(err);
      }

      if (data) {
        _this.handleOKResponse(data);
      }
    });
  }
});/**
 * Hey!
 *
 * SHouzz component used for Houzz social network
 * @link https://www.houzz.com/
 */
/**
 * Share parameters for link
 * @link https://www.houzz.com/buttonsAndBadges/button#houzzbuttondocs
 */

var SHouzz = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SHouzz',
  mixins: [BaseSocials('Houzz', {
    width: 1100,
    height: 700
  })],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://www.houzz.com/imageClipperUpload';
      var shareOptions = this.shareOptions;
      var id = shareOptions.id,
          url = shareOptions.url,
          title = shareOptions.title,
          image = shareOptions.image,
          category = shareOptions.category;
      var serialisedParams = getSerialisedParams({
        link: url,
        hzid: id,
        imageUrl: image,
        title: title,
        category: getSeparatedList(category)
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SInstaPaper component used for InstaPaper  social network
 * @link http://www.instapaper.com/
 */
/**
 * Share parameters for link
 */

var SInstaPaper = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SInstaPaper',
  mixins: [BaseSocials('InstaPaper', {
    width: 600,
    height: 600
  })],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'http://www.instapaper.com/edit';
      var shareOptions = this.shareOptions;
      var url = shareOptions.url,
          title = shareOptions.title,
          description = shareOptions.description;
      var serialisedParams = getSerialisedParams({
        url: url,
        title: title,
        description: description
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SKakaoStory component used for Kakao social network
 * @link https://story.kakao.com/
 */
/**
 * Share parameters for link
 * @link https://developers.kakao.com/sdk/js/kakao.js
 */

var SKakaoStory = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SKakaoStory',
  mixins: [BaseSocials('KakaoStory')],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://story.kakao.com/s/share';
      var shareOptions = this.shareOptions;
      var url = shareOptions.url,
          text = shareOptions.text;
      var serialisedParams = getSerialisedParams({
        url: url,
        text: text
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SLine component used for Line social network
 * @link https://line.me/
 */
/**
 * Share parameters for link
 * @link https://social-plugins.line.me/en/how_to_install#lineitbutton
 */

var SLine = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SLine',
  mixins: [BaseSocials('Line', {
    width: 600,
    height: 600
  })],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://lineit.line.me/share/ui';
      var shareOptions = this.shareOptions;
      var url = shareOptions.url,
          text = shareOptions.text;
      var serialisedParams = getSerialisedParams({
        url: url,
        text: text
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Simple implementation of XMLHTTPRequest.
 * It uses callback to prevent adding the promise polyfill.
 */
function HTTP(url, callback) {
  var request = new XMLHttpRequest();
  request.open('GET', url);

  request.onload = function onLoad() {
    if (request.readyState === 4 && request.status === 200) {
      callback(null, JSON.parse(request.response));
    }
  };

  request.onerror = function onError() {
    callback(request.statusText, null);
  };

  request.send();
}/**
 * Hey!
 *
 * SLineCount component used for Line social network
 * @link https://line.me/
 */
/**
 * Share parameters for link
 * @link https://social-plugins.line.me/en/how_to_install#lineitbutton
 */

var SLineCount = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SLineCount',
  mixins: [BaseCount('Line')],
  methods: {
    handlePinterestResponse: function handlePinterestResponse(data) {
      this.handleResult(data);
      this.handleCount(data.share);
    }
  },
  mounted: function mounted() {
    var _this = this;

    var shareOptions = this.shareOptions;
    var url = shareOptions.url;
    var BASE_URL = 'https://api.line.me/social-plugin/metrics';
    var finalURL = "".concat(BASE_URL).concat(getSerialisedParams({
      url: url
    }));
    this.handleLoading(true);
    HTTP(finalURL, function (err, data) {
      _this.handleLoading(false);

      if (err) {
        _this.handleError(err);
      }

      if (data) {
        _this.handlePinterestResponse(data);
      }
    });
  }
});/**
 * Hey!
 *
 * SLinkedIn component used for LinkedIn social network
 * @link https://www.linkedin.com
 */
/**
 * Share parameters for link
 * @link https://docs.microsoft.com/en-us/linkedin/consumer/integrations/self-serve/plugins/share-plugin
 */

var SLinkedIn = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SLinkedIn',
  mixins: [BaseSocials('LinkedIn')],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://www.linkedin.com/sharing/share-offsite/';
      var shareOptions = this.shareOptions;
      var url = shareOptions.url;
      var serialisedParams = getSerialisedParams({
        url: url
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SLiveJournal component used for LiveJournal social network
 * @link https://www.livejournal.com/
 */
/**
 * Share parameters for link
 * @link https://www.livejournal.com/developer/extshare
 */

var SLiveJournal = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SLiveJournal',
  mixins: [BaseSocials('LiveJournal')],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'http://www.livejournal.com/update.bml';
      var shareOptions = this.shareOptions;
      var subject = shareOptions.subject,
          url = shareOptions.url;
      var serialisedParams = getSerialisedParams({
        event: url,
        subject: subject
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SMailRu component used for Mail.ru social network
 * @link https://my.mail.ru/
 */
/**
 * Share parameters for link
 * @link https://api.mail.ru/sites/plugins/share/extended/
 */

var SMailRu = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SMailRu',
  mixins: [BaseSocials('Mail.ru')],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://connect.mail.ru/share';
      var shareOptions = this.shareOptions;
      var url = shareOptions.url,
          title = shareOptions.title,
          description = shareOptions.description,
          image = shareOptions.image,
          swfUrl = shareOptions.swfUrl,
          width = shareOptions.width,
          height = shareOptions.height;
      var serialisedParams = getSerialisedParams({
        share_url: url,
        title: title,
        description: description,
        image_url: image,
        swfurl: swfUrl,
        width: width,
        height: height
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SMicrosoftTeams component used for MicrosoftTeams social network
 * @link https://www.microsoft.com/en/microsoft-365/microsoft-teams/group-chat-software
 */
/**
 * Share parameters for link
 * @link https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/build-and-test/share-to-teams
 */

var SMicrosoftTeams = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SMicrosoftTeams',
  mixins: [BaseSocials('MicrosoftTeams')],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://teams.microsoft.com/share';
      var shareOptions = this.shareOptions;
      var url = shareOptions.url,
          preview = shareOptions.preview,
          text = shareOptions.text,
          instruction = shareOptions.instruction,
          title = shareOptions.title;
      var serialisedParams = getSerialisedParams({
        href: url,
        preview: preview,
        assignTitle: title,
        msgText: text,
        assignInstr: instruction
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SOdnoklassniki component used for Odnoklassniki (English: "Classmates") social network
 * @link https://ok.ru/
 */
/**
 * Share parameters for link
 * @link https://apiok.ru/en/ext/like
 */

var SOdnoklassniki = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SOdnoklassniki',
  mixins: [BaseSocials('Odnoklassniki')],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://connect.ok.ru/offer';
      var shareOptions = this.shareOptions;
      var url = shareOptions.url,
          title = shareOptions.title,
          imageUrl = shareOptions.imageUrl;
      var serialisedParams = getSerialisedParams({
        url: url,
        title: title,
        imageUrl: imageUrl
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SOdnoklassnikiCount component used for Odnoklassniki (English: "Classmates") social network
 * @link https://ok.ru/
 */
/**
 * Share parameters for link
 * @link https://apiok.ru/en/ext/like
 */

var SOdnoklassnikiCount = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SOdnoklassnikiCount',
  mixins: [BaseCount('Odnoklassniki')],
  methods: {
    handleOKResponse: function handleOKResponse(count) {
      this.handleResult({
        count: count
      });
      this.handleCount(count);
    }
  },
  mounted: function mounted() {
    var _this = this;

    var shareOptions = this.shareOptions;
    var ref = shareOptions.ref;
    var BASE_URL = 'https://connect.ok.ru/dk';
    var finalURL = "".concat(BASE_URL).concat(getSerialisedParams({
      'st.cmd': 'extLike',
      tp: 'json',
      ref: ref
    }));
    this.handleLoading(true);
    HTTP(finalURL, function (err, data) {
      _this.handleLoading(false);

      if (err) {
        _this.handleError(err);
      }

      if (data) {
        _this.handleOKResponse(data.count);
      }
    });
  }
});/**
 * Hey!
 *
 * SPinterest component used for Pinterest social network
 * @link https://www.pinterest.com/
 */
/**
 * Share parameters for link
 * @link https://developers.pinterest.com/docs/widgets/save/?
 */

var SPinterest = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SPinterest',
  mixins: [BaseSocials('Pinterest', {
    width: 700,
    height: 700
  })],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'http://pinterest.com/pin/create/button/';
      var shareOptions = this.shareOptions;
      var url = shareOptions.url,
          media = shareOptions.media,
          description = shareOptions.description;
      var serialisedParams = getSerialisedParams({
        url: url,
        media: media,
        description: description
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SPinterestCount component used for Pinterest social network
 * @link https://www.pinterest.com/
 */
/**
 * Share parameters for link
 */

var SPinterestCount = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SPinterestCount',
  mixins: [BaseCount('Pinterest')],
  methods: {
    handlePinterestResponse: function handlePinterestResponse(data) {
      this.handleResult(data);
      this.handleCount(data.count);
    }
  },
  mounted: function mounted() {
    var _this = this;

    var shareOptions = this.shareOptions;
    var url = shareOptions.url;
    var BASE_URL = 'https://api.pinterest.com/v1/urls/count.json';
    var finalURL = "".concat(BASE_URL).concat(getSerialisedParams({
      url: url
    }));
    this.handleLoading(true);
    JSONP(finalURL, function (err, data) {
      _this.handleLoading(false);

      if (err) {
        _this.handleError(err);
      }

      if (data) {
        _this.handlePinterestResponse(data);
      }
    });
  }
});/**
 * Hey!
 *
 * SPocket component used for Pocket social network
 * @link https://getpocket.com/
 */
/**
 * Share parameters for link
 * @link https://getpocket.com/publisher/button_docs
 */

var SPocket = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SPocket',
  mixins: [BaseSocials('GetPocket')],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://getpocket.com/edit';
      var shareOptions = this.shareOptions;
      var url = shareOptions.url;
      var serialisedParams = getSerialisedParams({
        url: url
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SQZone component used for QZone social network
 * @link https://qzone.qq.com/
 */
/**
 * Share parameters for link
 */

var SQZone = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SQZone',
  mixins: [BaseSocials('QZone')],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey';
      var shareOptions = this.shareOptions;
      var url = shareOptions.url,
          title = shareOptions.title,
          summary = shareOptions.summary;
      var serialisedParams = getSerialisedParams({
        url: url,
        title: title,
        summary: summary
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SReddit component used for Reddit social network
 * @link https://www.reddit.com/
 */
/**
 * Share parameters for link
 */

var SReddit = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SReddit',
  mixins: [BaseSocials('Reddit', undefined, undefined, undefined, false)],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://reddit.com/submit';
      var shareOptions = this.shareOptions;
      var url = shareOptions.url,
          title = shareOptions.title,
          text = shareOptions.text,
          selftext = shareOptions.selftext;
      var serialisedParams = getSerialisedParams({
        url: url,
        title: title,
        text: text,
        selftext: selftext
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SRedditCount component used for Reddit social network
 * @link https://www.reddit.com/
 */
/**
 * Share parameters for link
 */

var SRedditCount = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SRedditCount',
  mixins: [BaseCount('Reddit')],
  methods: {
    handleRedditResponse: function handleRedditResponse(data) {
      var _data$data, _data$data$children, _data$data$children$;

      this.handleResult(data);
      this.handleCount(data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : (_data$data$children = _data$data.children) === null || _data$data$children === void 0 ? void 0 : (_data$data$children$ = _data$data$children[0]) === null || _data$data$children$ === void 0 ? void 0 : _data$data$children$.data.score);
    }
  },
  mounted: function mounted() {
    var _this = this;

    var shareOptions = this.shareOptions;
    var url = shareOptions.url;
    var BASE_URL = 'https://www.reddit.com/api/info.json';
    var finalURL = "".concat(BASE_URL).concat(getSerialisedParams({
      limit: 1,
      url: url
    }));
    this.handleLoading(true);
    JSONP(finalURL, function (err, data) {
      _this.handleLoading(false);

      if (err) {
        _this.handleError(err);
      }

      if (data) {
        _this.handleRedditResponse(data);
      }
    }, 'jsonp');
  }
});/**
 * Hey!
 *
 * SRenRen component used for RenRen social network
 * @link https://renren.com
 */
/**
 * Share parameters for link
 * @link http://dev.renren.com/website/?widget=rrshare&content=use
 */

var SRenRen = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SRenRen',
  mixins: [BaseSocials('RenRen')],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'http://widget.renren.com/dialog/share';
      var shareOptions = this.shareOptions;
      var resourceUrl = shareOptions.resourceUrl,
          srcUrl = shareOptions.srcUrl,
          title = shareOptions.title,
          description = shareOptions.description,
          pic = shareOptions.pic;
      var serialisedParams = getSerialisedParams({
        resourceUrl: resourceUrl,
        srcUrl: srcUrl,
        title: title,
        description: description,
        pic: pic
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SSkype component used for Skype social network
 * @link https://web.skype.com/
 */
/**
 * Share parameters for link
 */

var SSkype = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SSkype',
  mixins: [BaseSocials('Skype')],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://web.skype.com/share';
      var shareOptions = this.shareOptions;
      var url = shareOptions.url,
          text = shareOptions.text;
      var serialisedParams = getSerialisedParams({
        url: url,
        text: text
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SSms component used for sending SMS via an HTML link
 */
/**
 * Share parameters for link
 */

var SSms = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SSms',
  props: {
    /**
     * Share parameters for SMS
     */
    shareOptions: {
      type: Object,
      required: true
    }
  },
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'sms:';
      var shareOptions = this.shareOptions;
      var number = shareOptions.number,
          body = shareOptions.body;
      var serialisedParams = getSerialisedParams({
        body: body
      });
      return "".concat(BASE_URL).concat(number).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return h('a', {
      attrs: {
        href: this.networkURL
      }
    }, this.$slots.default);
  }
});/**
 * Hey!
 *
 * STelegram component used for Telegram social network
 * @link https://telegram.org/
 */
/**
 * Share parameters for link
 * @link https://core.telegram.org/widgets/share#custom-buttons
 */

var STelegram = /* #__PURE__ */Vue__default['default'].extend({
  name: 'STelegram',
  mixins: [BaseSocials('Telegram')],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://t.me/share/url';
      var shareOptions = this.shareOptions;
      var url = shareOptions.url,
          text = shareOptions.text;
      var serialisedParams = getSerialisedParams({
        url: url,
        text: text
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SThreema component used for Threema social network
 * @link https://threema.ch/en
 */
/**
 * Share parameters for link
 */

var SThreema = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SThreema',
  mixins: [BaseSocials('Threema')],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'threema://compose';
      var shareOptions = this.shareOptions;
      var url = shareOptions.url,
          id = shareOptions.id;
      var serialisedParams = getSerialisedParams({
        text: url,
        id: id
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * STrello component used for Trello social network
 * @link https://trello.com/
 */
/**
 * Share parameters for link
 */

var STrello = /* #__PURE__ */Vue__default['default'].extend({
  name: 'STrello',
  mixins: [BaseSocials('Trello')],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://trello.com/add-card';
      var shareOptions = this.shareOptions;
      var url = shareOptions.url,
          name = shareOptions.name,
          description = shareOptions.description;
      var serialisedParams = getSerialisedParams({
        url: url,
        name: name,
        desc: description,
        mode: 'popup'
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * STumblr component used for Tumblr social network
 * @link https://tumblr.com/
 */
/**
 * Share parameters for link
 * @link https://www.tumblr.com/docs/en/share_button
 */

var STumblr = /* #__PURE__ */Vue__default['default'].extend({
  name: 'STumblr',
  mixins: [BaseSocials('Tumblr', {
    width: 542,
    height: 644
  })],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://www.tumblr.com/widgets/share/tool';
      var shareOptions = this.shareOptions;
      var canonicalUrl = shareOptions.canonicalUrl,
          tags = shareOptions.tags,
          title = shareOptions.title,
          caption = shareOptions.caption,
          content = shareOptions.content,
          showVia = shareOptions.showVia;
      var serialisedParams = getSerialisedParams({
        canonicalUrl: canonicalUrl,
        title: title,
        caption: caption,
        content: content,
        tags: getSeparatedList(tags),
        'show-via': showVia
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * STumblrCount component used for Tumblr social network
 * @link https://tumblr.com/
 */
/**
 * Share parameters for link
 * @link https://www.tumblr.com/docs/en/share_button
 */

var STumblrCount = /* #__PURE__ */Vue__default['default'].extend({
  name: 'STumblrCount',
  mixins: [BaseCount('Tumblr')],
  methods: {
    handleTumblrResponse: function handleTumblrResponse(data) {
      var _data$response;

      this.handleResult(data);
      this.handleCount((_data$response = data.response) === null || _data$response === void 0 ? void 0 : _data$response.note_count);
    }
  },
  mounted: function mounted() {
    var _this = this;

    var shareOptions = this.shareOptions;
    var url = shareOptions.url;
    var BASE_URL = 'http://api.tumblr.com/v2/share/stats';
    var finalURL = "".concat(BASE_URL).concat(getSerialisedParams({
      url: url
    }));
    this.handleLoading(true);
    JSONP(finalURL, function (err, data) {
      _this.handleLoading(false);

      if (err) {
        _this.handleError(err);
      }

      if (data) {
        _this.handleTumblrResponse(data);
      }
    });
  }
});/**
 * Hey!
 *
 * STwitter component used for Twitter social network
 * @link https://twitter.com/
 */
/**
 * Share parameters for link
 * @link https://developer.twitter.com/en/docs/twitter-for-websites/tweet-button/overview
 */

var STwitter = /* #__PURE__ */Vue__default['default'].extend({
  name: 'STwitter',
  mixins: [BaseSocials('Twitter', undefined, undefined, undefined, false)],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://twitter.com/intent/tweet';
      var shareOptions = this.shareOptions;
      var text = shareOptions.text,
          url = shareOptions.url,
          hashtags = shareOptions.hashtags,
          via = shareOptions.via;
      var serialisedParams = getSerialisedParams({
        text: text,
        url: url,
        hashtags: getSeparatedList(hashtags),
        via: via
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SViber component used for Viber social network
 * @link https://www.viber.com/
 */
/**
 * Share parameters for link
 * @link https://developers.viber.com/docs/tools/share-button/
 */

var SViber = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SViber',
  mixins: [BaseSocials('Viber')],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'viber://forward';
      var shareOptions = this.shareOptions;
      var text = shareOptions.text,
          url = shareOptions.url;
      var serialisedParams = getSerialisedParams({
        text: "".concat(text, " ").concat(url)
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SVkontakte component used for Vkontakte social network
 * @link https://vk.com
 */
/**
 * Share parameters for link
 * @link https://vk.com/dev/widget_share
 */

var SVkontakte = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SVkontakte',
  mixins: [BaseSocials('Vkontakte', undefined, undefined, undefined, false)],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://vk.com/share.php';
      var shareOptions = this.shareOptions;
      var url = shareOptions.url,
          title = shareOptions.title,
          image = shareOptions.image,
          noParse = shareOptions.noParse,
          noVkLinks = shareOptions.noVkLinks;
      var serialisedParams = getSerialisedParams({
        url: url,
        title: title,
        image: image,
        noparse: noParse,
        no_vk_links: Number(noVkLinks)
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SVkontakteCount component used for Vkontakte social network
 * @link https://vk.com
 * @example https://vk.com/share.php?act=count&index=1&url=http
 */
var SVkontakteCount = /* #__PURE__ */Vue__default['default'].extend({
  mixins: [BaseCount('Vkontakte')],
  methods: {
    handleVKResponse: function handleVKResponse(index, count) {
      var _window$VK$callbacks;

      this.handleLoading(false);
      this.handleResult({
        index: index,
        count: count
      });
      this.handleCount(count);
      (_window$VK$callbacks = window.VK.callbacks) === null || _window$VK$callbacks === void 0 ? true : delete _window$VK$callbacks["cb".concat(index)];
    }
  },
  mounted: function mounted() {
    var shareOptions = this.shareOptions;
    var url = shareOptions.url;
    var BASE_URL = 'https://vk.com/share.php';

    if (!window.VK) {
      window.VK = {};
    }

    if (!window.VK.callbacks) {
      window.VK.callbacks = {};
    }

    window.VK.Share = {
      count: function (_count) {
        function count(_x, _x2) {
          return _count.apply(this, arguments);
        }

        count.toString = function () {
          return _count.toString();
        };

        return count;
      }(function (index, count) {
        var _window$VK$callbacks2, _window$VK$callbacks3;

        return (_window$VK$callbacks2 = window.VK.callbacks) === null || _window$VK$callbacks2 === void 0 ? void 0 : (_window$VK$callbacks3 = _window$VK$callbacks2["cb".concat(index)]) === null || _window$VK$callbacks3 === void 0 ? void 0 : _window$VK$callbacks3.call(_window$VK$callbacks2, index, count);
      })
    };
    var index = Object.keys(window.VK.callbacks).length;
    var key = "cb".concat(index);
    window.VK.callbacks[key] = this.handleVKResponse;
    var finalURL = "".concat(BASE_URL).concat(getSerialisedParams({
      act: 'count',
      index: index,
      url: url
    }));
    this.handleLoading(true);
    JSONP(finalURL);
  }
});/**
 * Hey!
 *
 * SWeibo component used for Weibo social network
 * @link https://weibo.com/
 */
/**
 * Share parameters for link
 * @link http://open.weibo.com/wiki/ShareCode
 */

var SWeibo = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SWeibo',
  mixins: [BaseSocials('Weibo')],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'http://service.weibo.com/share/share.php';
      var shareOptions = this.shareOptions;
      var url = shareOptions.url,
          title = shareOptions.title,
          appkey = shareOptions.appkey,
          pic = shareOptions.pic;
      var serialisedParams = getSerialisedParams({
        url: url,
        title: title,
        appkey: appkey,
        pic: pic
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SWhatsApp component used for WhatsApp social network
 * @link https://whatsapp.com
 */
/**
 * Share parameters for link
 * @link https://faq.whatsapp.com/general/chats/how-to-use-click-to-chat
 */

var SWhatsApp = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SWhatsApp',
  mixins: [BaseSocials('WhatsApp')],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://api.whatsapp.com/send';
      var shareOptions = this.shareOptions;
      var number = shareOptions.number,
          text = shareOptions.text;
      var serialisedParams = getSerialisedParams({
        phone: number,
        text: text
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SWordPress component used for WordPress social network
 * @link https://wordpress.org/
 */
/**
 * Share parameters for link
 * @link https://codex.wordpress.org/Press_This
 */

var SWordPress = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SWordPress',
  mixins: [BaseSocials('WordPress')],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'wp-admin/press-this.php';
      var shareOptions = this.shareOptions;
      var domain = shareOptions.domain,
          url = shareOptions.url,
          title = shareOptions.title,
          text = shareOptions.text,
          image = shareOptions.image;
      var serialisedParams = getSerialisedParams({
        u: url,
        t: title,
        s: text,
        i: image
      });
      return "".concat(domain, "/").concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SXing component used for Xing social network
 * @link https://xing.com/
 */
/**
 * Share parameters for link
 * @link https://dev.xing.com/plugins/share_button/docs
 */

var SXing = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SXing',
  mixins: [BaseSocials('Xing')],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://www.xing.com/spi/shares/new';
      var shareOptions = this.shareOptions;
      var url = shareOptions.url,
          followUrl = shareOptions.followUrl;
      var serialisedParams = getSerialisedParams({
        url: url,
        follow_url: followUrl
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SYahoo component used for Yahoo social network
 * @link http://compose.mail.yahoo.com/
 */
/**
 * Share parameters for link
 */

var SYahoo = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SYahoo',
  mixins: [BaseSocials('Yahoo')],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'http://compose.mail.yahoo.com/';
      var shareOptions = this.shareOptions;
      var email = shareOptions.email,
          subject = shareOptions.subject,
          body = shareOptions.body;
      var serialisedParams = getSerialisedParams({
        to: email,
        subject: subject,
        body: body
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * Hey!
 *
 * SYammer component used for Yammer social network
 * @link https://yammer.com/
 */
/**
 * Share parameters for link
 * @link https://developer.yammer.com/docs/share-button
 */

var SYammer = /* #__PURE__ */Vue__default['default'].extend({
  name: 'SYammer',
  mixins: [BaseSocials('Yammer', {
    width: 900,
    height: 600
  })],
  computed: {
    networkURL: function networkURL() {
      var BASE_URL = 'https://www.yammer.com/messages/new';
      var shareOptions = this.shareOptions;
      var text = shareOptions.text,
          url = shareOptions.url,
          groupId = shareOptions.groupId;
      var serialisedParams = getSerialisedParams({
        login: true,
        status: "".concat(text, " ").concat(url),
        group_id: groupId
      });
      return "".concat(BASE_URL).concat(serialisedParams);
    }
  },
  render: function render(h) {
    return this.generateComponent(h, this.networkURL);
  }
});/**
 * All Components
 *
 * @note Dear contributors,
 * Components listed in this file should be listed alphabetically. Thanks :)
 */var components$1=/*#__PURE__*/Object.freeze({__proto__:null,SBlogger: SBlogger,SDevTo: SDevTo,SDiaspora: SDiaspora,SDouban: SDouban,SEmail: SEmail,SEvernote: SEvernote,SFacebook: SFacebook,SFacebookCount: SFacebookCount,SFacebookMessenger: SFacebookMessenger,SFacebookWorkplace: SFacebookWorkplace,SFlipBoard: SFlipBoard,SGithub: SGithub,SGithubCount: SGithubCount,SGithubGist: SGithubGist,SGithubGistCount: SGithubGistCount,SGithubRepo: SGithubRepo,SGithubRepoCount: SGithubRepoCount,SGmail: SGmail,SGoogleBookmarks: SGoogleBookmarks,SHackerNews: SHackerNews,SHatena: SHatena,SHatenaCount: SHatenaCount,SHouzz: SHouzz,SInstaPaper: SInstaPaper,SKakaoStory: SKakaoStory,SLine: SLine,SLineCount: SLineCount,SLinkedIn: SLinkedIn,SLiveJournal: SLiveJournal,SMailRu: SMailRu,SMicrosoftTeams: SMicrosoftTeams,SOdnoklassniki: SOdnoklassniki,SOdnoklassnikiCount: SOdnoklassnikiCount,SPinterest: SPinterest,SPinterestCount: SPinterestCount,SPocket: SPocket,SQZone: SQZone,SReddit: SReddit,SRedditCount: SRedditCount,SRenRen: SRenRen,SSkype: SSkype,SSms: SSms,STelegram: STelegram,SThreema: SThreema,STrello: STrello,STumblr: STumblr,STumblrCount: STumblrCount,STwitter: STwitter,SViber: SViber,SVkontakte: SVkontakte,SVkontakteCount: SVkontakteCount,SWeibo: SWeibo,SWhatsApp: SWhatsApp,SWordPress: SWordPress,SXing: SXing,SYahoo: SYahoo,SYammer: SYammer});/**
 * Import vue components
 */
/**
 * Install function executed by Vue.use()
 */

var install = function installVueSocials(Vue) {
  Object.entries(components$1).forEach(function (item) {
    Vue.component(item[0], item[1]);
  });
};var components=/*#__PURE__*/Object.freeze({__proto__:null,'default': install,SBlogger: SBlogger,SDevTo: SDevTo,SDiaspora: SDiaspora,SDouban: SDouban,SEmail: SEmail,SEvernote: SEvernote,SFacebook: SFacebook,SFacebookCount: SFacebookCount,SFacebookMessenger: SFacebookMessenger,SFacebookWorkplace: SFacebookWorkplace,SFlipBoard: SFlipBoard,SGithub: SGithub,SGithubCount: SGithubCount,SGithubGist: SGithubGist,SGithubGistCount: SGithubGistCount,SGithubRepo: SGithubRepo,SGithubRepoCount: SGithubRepoCount,SGmail: SGmail,SGoogleBookmarks: SGoogleBookmarks,SHackerNews: SHackerNews,SHatena: SHatena,SHatenaCount: SHatenaCount,SHouzz: SHouzz,SInstaPaper: SInstaPaper,SKakaoStory: SKakaoStory,SLine: SLine,SLineCount: SLineCount,SLinkedIn: SLinkedIn,SLiveJournal: SLiveJournal,SMailRu: SMailRu,SMicrosoftTeams: SMicrosoftTeams,SOdnoklassniki: SOdnoklassniki,SOdnoklassnikiCount: SOdnoklassnikiCount,SPinterest: SPinterest,SPinterestCount: SPinterestCount,SPocket: SPocket,SQZone: SQZone,SReddit: SReddit,SRedditCount: SRedditCount,SRenRen: SRenRen,SSkype: SSkype,SSms: SSms,STelegram: STelegram,SThreema: SThreema,STrello: STrello,STumblr: STumblr,STumblrCount: STumblrCount,STwitter: STwitter,SViber: SViber,SVkontakte: SVkontakte,SVkontakteCount: SVkontakteCount,SWeibo: SWeibo,SWhatsApp: SWhatsApp,SWordPress: SWordPress,SXing: SXing,SYahoo: SYahoo,SYammer: SYammer});/**
 * iife/cjs usage extends esm default export â€“ so import it all
 */
/**
 * Attach named exports directly to plugin. IIFE/CJS will
 * only expose one global var, with component exports exposed as properties of
 * that global var (eg. plugin.component)
 */

Object.entries(components).forEach(function (item) {
  if (item[0] !== 'default') {
    var key = item[0];
    var val = item[1];
    install[key] = val;
  }
});module.exports=install;