/**
 * Hey!
 *
 * SGithubCount component used for GitHub social network
 * @link https://github.com/
 */
import Vue from 'vue';
declare const GITHUB_LINK_TYPES: {
    follow: string;
};
export declare type TSGithubCountLinkType = typeof GITHUB_LINK_TYPES[keyof typeof GITHUB_LINK_TYPES];
export interface ISGithubCountErrorResponse {
    documentation_url: string;
    message: string;
}
export interface ISGithubCountSuccessResponse {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
    name: string;
    company: string;
    blog: string;
    location: string;
    email: null;
    hireable: null;
    bio: string;
    twitter_username: null;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    created_at: string;
    updated_at: string;
}
export interface ISGithubCountResult {
    meta: {
        'Content-Type': string;
        'Cache-Control': string;
        Vary: string;
        ETag: string;
        'Last-Modified': string;
        'X-GitHub-Media-Type': string;
        status: number;
        'X-RateLimit-Limit': string;
        'X-RateLimit-Remaining': string;
        'X-RateLimit-Reset': string;
        'X-RateLimit-Used': string;
    };
    data: ISGithubCountSuccessResponse | ISGithubCountErrorResponse;
}
/**
 * Share parameters for link
 */
export interface ISGithubCountShareOptions {
    username: string;
    type: TSGithubCountLinkType;
}
declare const _default: import("vue/types/vue").ExtendedVue<Vue & object & Record<never, any> & import("../../mixins/BaseCount/BaseCount").TBaseCountDataOptions<ISGithubCountResult> & {
    generateComponent(h: import("vue").CreateElement): import("vue").VNode;
    handleResult(value: ISGithubCountResult): void;
    handleError(value: string | Error | null): void;
    handleLoading(value: boolean): void;
    handleCount(count: number | undefined): void;
} & import("../../mixins/BaseCount/BaseCount").TBaseCountPropsOptions<ISGithubCountShareOptions>, unknown, {
    handleGithubResponse(data: ISGithubCountResult): void;
}, unknown, Record<never, any>>;
export default _default;
