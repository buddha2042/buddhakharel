/**
 * Hey!
 *
 * SGithubGistCount component used for Github Gists social network
 * @link https://gist.github.com/
 */
import Vue from 'vue';
declare const GITHUB_LINK_TYPES: {
    fork: string;
};
export declare type TSGithubLinkType = typeof GITHUB_LINK_TYPES[keyof typeof GITHUB_LINK_TYPES];
/**
 * Share parameters for link
 */
export interface ISGithubGistCountShareOptions {
    gistId: string;
    type: TSGithubLinkType;
}
export interface ISGithubGistCountSuccessResponse {
    comments: 0;
    comments_url: string;
    commits_url: string;
    created_at: string;
    description: string;
    files: Record<string, unknown>;
    forks_url: string;
    git_pull_url: string;
    git_push_url: string;
    history: {
        committed_at: string;
        url: string;
        user: {
            avatar_url: string;
            events_url: string;
            followers_url: string;
            following_url: string;
            gists_url: string;
            gravatar_id: string;
            html_url: string;
            id: number;
            login: string;
            node_id: string;
            organizations_url: string;
            received_events_url: string;
            repos_url: string;
            site_admin: boolean;
            starred_url: string;
            subscriptions_url: string;
            type: string;
            url: string;
        };
        version: string;
    }[];
    html_url: string;
    id: string;
    node_id: string;
    owner: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string;
        html_url: string;
        id: number;
        login: string;
        node_id: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
    };
    public: boolean;
    truncated: boolean;
    updated_at: string;
    url: string;
    user: unknown;
    forks: unknown[];
}
export interface ISGithubGistCountErrorResponse {
    documentation_url: string;
    message: string;
}
export interface SGithubGistCountResult {
    meta: {
        'Content-Type': string;
        'Cache-Control': string;
        Vary: string;
        ETag: string;
        'Last-Modified': string;
        'X-GitHub-Media-Type': string;
        status: number;
        'X-RateLimit-Limit': string;
        'X-RateLimit-Remaining': string;
        'X-RateLimit-Reset': string;
        'X-RateLimit-Used': string;
    };
    data: ISGithubGistCountSuccessResponse | ISGithubGistCountErrorResponse;
}
declare const _default: import("vue/types/vue").ExtendedVue<Vue & object & Record<never, any> & import("../../mixins/BaseCount/BaseCount").TBaseCountDataOptions<SGithubGistCountResult> & {
    generateComponent(h: import("vue").CreateElement): import("vue").VNode;
    handleResult(value: SGithubGistCountResult): void;
    handleError(value: string | Error | null): void;
    handleLoading(value: boolean): void;
    handleCount(count: number | undefined): void;
} & import("../../mixins/BaseCount/BaseCount").TBaseCountPropsOptions<ISGithubGistCountShareOptions>, unknown, {
    handleGithubResponse(data: SGithubGistCountResult): void;
}, unknown, Record<never, any>>;
export default _default;
