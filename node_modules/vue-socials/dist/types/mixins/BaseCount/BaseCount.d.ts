/**
 * Hey!
 *
 * Base count mixin used for every social count component.
 */
import { ExtendedVue } from 'vue/types/vue';
import Vue, { Component, CreateElement, VNode } from 'vue';
export declare type TBaseCountDataOptions<R> = {
    count: number | undefined;
    response: R | null;
    error: Error | string | null;
    isLoading: boolean;
};
export declare type TBaseCountPropsOptions<T> = {
    tag: Component | string;
    shareOptions: T;
};
export declare type TBaseCountMixin<T, R> = ExtendedVue<Vue, TBaseCountDataOptions<R>, {
    generateComponent(h: CreateElement): VNode;
    handleResult(value: R): void;
    handleError(value: Error | string | null): void;
    handleLoading(value: boolean): void;
    handleCount(count: (number | undefined)): void;
}, unknown, TBaseCountPropsOptions<T>>;
/**
 * Wrapper around Vue mixin to pass parameters inside.
 * We use multiple parameters instead of a single object because
 * it causes problems with tree-shaking. I don't know why.
 * A little bit inconvenient, but overall OK :)
 */
export default function BaseCount<T, R>(name: string, customShareOptions?: T, isShareOptionsRequired?: boolean, customAriaLabel?: string): TBaseCountMixin<T, R>;
